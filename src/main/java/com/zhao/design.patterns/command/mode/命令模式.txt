命令模式
    将一个请求封装为一个对象，从而让我们可用不同的请求对客户进行参数化，对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象的行为型模式，其别名为动作(Action)模式或事务(Transaction)模式。
    命令模式有如下几个角色：
        1、Command(抽象命令类)：抽象命令类一般是一个抽象类或接口，在其中声明了用于执行请求的execute()等方法，通过这些方法可以调用请求接收者的相关操作。
        2、ConcreteCommand(具体命令类)：具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中。在实现execute()方法时，将调用接收者对象的相关操作(Action).
        3、Invoker(调用者)：调用者即请求发送者，它通过命令对象来执行请求。一个调用者并不需要在设计时确定其接收者，因此它只与首相命令类之间存在关联关系。在程序运行时可以将一个具体命令对象注入其中，在调用具体命令对象的execute()方法，从而实现间接调用请求接收者的相关操作。
        4、Receiver(接收者)：接收者执行与请求相关的操作，它具体实现对请求的业务处理。
    命令模式的本质时对请求进行封装，一个请求对应于一个命令，将发出命令的责任和执行命令的责任分隔开，每一个命令都是一个操作：请求的一方发出请求要求执行一个操作；接收的一方受到请求，并执行相应的操作。命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求如何被接受、操作是否被执行、何时被执行，以及是怎么被执行的。
    命令模式的关键在于引入了抽象命令类，请求发送者针对对抽象命令编程，只有实现了抽象命令类的具体命令才与请求接收者相关联。在最简单的抽象命令类中只包含了一个抽象的execute()方法的不同实现，并调用不同接收者的请求处理方式。

命令模式了，就是有上级找你去干事，他不管你下面是如何处理的，只需要命令调用就行