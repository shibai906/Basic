状态模式：
    对象行为的变化是由于状态的变化引入，那么当内部状态发生变化的时候，就会改变对象的行为，而这种改变视乎就改变了整个类。
    这个模式状态封装成独立的类，并将动作委托到代表当前状态的对象，这就是说行为会随着内部状态而改变。这个对象实际上是从别的类实例化而来的，实际上，你知道我们是在适用组合通过简单引用不同的状态对象来造成类改变的假象

要点：
    1、客户不会和状态进行交互，全盘了解状态是context的工作
    2、在状态模式重，每个状态通过持有Context的引用，来实现状态转移。
    3、适用状态模式总是会增加设计中类的数目，是为了要获得程序可扩展性，弹性的代价，如果你的代码不是一次性的，后期可能会不断加入不同的状态，那么状态模式的设计是绝对值得的。但它同时也是一个缺点
    4、状态类可以被多个context实例共享

状态模式和策略模式对比
    相似之处：
        添加新的状态或策略都很容易，而且不需要修改适用他们的Context对象。他们都让你的代码符合OCP原则(软件对扩展应该是开发的，对修改应该是关闭的)。在状态模式和策略模式中，Context对象对修改是关闭的，添加新的状态或策略，都不需要修改Context。正如状态模式中的Context会有初始状态一样，策咯模式同样有默认策略。状态模式以不同的状态封装不同的行为，而策略模式同样有默认策咯。状态模式以不同的状态封装不同的行为，而策略模式以不同的策略封装不同的行为。他们都依赖子类去实现相关行为。









