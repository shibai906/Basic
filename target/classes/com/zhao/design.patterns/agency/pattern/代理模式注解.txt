代理模式：
    是指客户端并不直接调用实际的对象，而是通过调用代理来间接的调用实际的对象。
    一般情况下是因为客户端不想直接访问实际对象，或访问实际对象存在困难，因此需要通过一个代理对象来完成间接的访问。

静态代理：
1、可以做到在不修改目标对象的功能前提下，对目标功能扩展
2、缺点：
    因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类，类也太多，每个都要弄，一旦增加方法，目标对象与代理对象都要进行维护。

动态代理，需要注意这些：
    1、代理对象，不需要实现接口
    2、代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象(需要我们制定创建代理对象/目标对象实现的接口类型)
    3、动态代理也称作JDK代理，接口代理。

    JDK中生成代理对象的API
    代理类所在包：java.lang.reflect.Proxy
    JDK实现代理只需要使用newProxyInstance方法，但该方法需要接受三个参数，以下是完整的写法：
    static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,InvocationHandler h )
    三个参数指定：
    ClassLoader loader: 指定当前目标对象使用类加载器，获取加载器的方法是固定的。
    Class<?>[] interfaces：目标对象实现的接口的类型，使用泛型方式确认类型
    InvocationHandler h：事件处理，执行目标对象的方法时，会触发事件处理器的方法，会把当前执行目标对象的方法作为参数传入。


静态代理一般很少用，大多特别喜欢使用动态代理。

动态代理和Cglib代理的最大区别在于，动态代理必须继承接口，而Cglib就不用。
